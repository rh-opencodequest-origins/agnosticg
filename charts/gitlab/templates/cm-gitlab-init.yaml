kind: ConfigMap
metadata:
  name:  cm-init-gitlab
  annotations:
    argocd.argoproj.io/sync-wave: "3"
apiVersion: v1
data:
  playbook.yaml: |
    ---
    - name: Configure GitLab
      hosts: localhost
      vars:
        gitlab_namespace: {{ $.Release.Namespace }}
        root_password: {{ $.Values.gitlab.rootPassword }}
        user_create: true
      tasks:
        - name: Pause for 5 minutes waiting for GitLab
          ansible.builtin.pause:
            minutes: 5

        - name: Check GitLab Liveness
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/projects
            method: GET
            validate_certs: false
          register: r_liveness
          retries: 60
          delay: 10
          until: r_liveness.status == 200

        - name: Generate root user personal token
          shell: |
            POD=$(oc get pod -l app=gitlab -n gitlab --no-headers | awk '{print $1}')
            oc exec $POD -n {{ $.Release.Namespace }} -- /bin/sh -c /scripts/create-root-pat.sh
            ROOT_PAT=$(oc exec $POD -n {{ $.Release.Namespace }} -- /bin/sh -c "cat /tmp/root.pat")
            oc delete secret root-user-personal-token -n {{ $.Release.Namespace }} --ignore-not-found
            oc create secret generic root-user-personal-token --from-literal=token=$ROOT_PAT -n {{ $.Release.Namespace }}

        - name: Retrieve root token
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Secret
            name: root-user-personal-token
            namespace: '{{ "{{" }} gitlab_namespace {{ "}}" }}'
          register: r_root_token
          failed_when: r_root_token.resources[0].data.token | length == 0

        - name:
          debug:
            var: r_root_token

        - name: Decode root token
          set_fact:
            root_token: '{{ "{{" }} r_root_token.resources[0].data.token | b64decode {{ "}}" }}'

        - name: Update application settings
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/application/settings
            method: PUT
            body_format: form-urlencoded
            body:
              import_sources: "git,github,gitea"
              version_check_enabled: "false"
              allow_local_requests_from_web_hooks_and_services: "true"
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 200

{{- range $item := .Values.gitlab.users.users }}

        - name: Create user {{ $item.id }}
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/users
            method: POST
            body_format: form-urlencoded
            body:
              admin: false
              email: {{ $item.id }}@rhdemo.com
              public_email: {{ $item.id }}@rhdemo.com
              skip_confirmation: true
              username: {{ $item.id }}
              password: {{ include "gitlab-user.password" $ }}
              name: {{ $item.id }} GitLab
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 201
          register: r_user
          retries: 100
          delay: 5
          until: r_user.status == 201
{{- end }}

        - name: List users
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/users?per_page=100
            method: GET
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 200
          register: r_users

{{- range $item := .Values.gitlab.groups }}

        - name: Create group {{ $item.name }}
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/groups
            method: POST
            body_format: form-urlencoded
            body:
              name: {{ $item.name }}
              path: {{ $item.name }}
              visibility: public
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 201
          register: r_group
          retries: 100
          delay: 5
          until: r_group.status == 201

{{- if $item.repo }}

        - name: Import repository to group
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/projects
            method: POST
            body_format: form-urlencoded
            body:
              name: '{{ "{{" }} item.name {{ "}}" }}'
              import_url: '{{ "{{" }} item.url {{ "}}" }}'
              visibility: public
              builds_access_level: enabled
              auto_devops_enabled: false
              only_allow_merge_if_pipeline_succeeds: '{{ "{{" }} item.checkPipeline {{ "}}" }}'
              namespace_id: '{{ "{{" }} r_group.json.id {{ "}}" }}'
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 201
          retries: 100
          delay: 5
          register: r_import
          until: r_import.status == 201
          loop:
{{- range $item1 := $item.repo }}
            - name: {{ $item1.name }}
              url: {{ $item1.url }}
              checkPipeline: {{ include "gitlab.repo.check-pipeline" $item1 }}
{{- end }}
{{- end }}

{{- if $item.project }}
{{- range $item1 := $item.project }}

        - name: Create project for group
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/projects
            method: POST
            body_format: form-urlencoded
            body:
              name: {{ $item1.name }}
              visibility: public
              issues_access_level: enabled
              auto_devops_enabled: false
              namespace_id: '{{ "{{" }} r_group.json.id {{ "}}" }}'
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 201
          retries: 100
          delay: 5
          register: r_create_project
          until: r_create_project.status == 201

{{- if $item1.labels }}

        - name: Create labels in project
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/projects/{{ "{{" }} r_create_project.json.id {{ "}}" }}/labels
            method: POST
            body_format: form-urlencoded
            body:
              name: '{{ "{{" }} item.name {{ "}}" }}'
              color: '{{ "{{" }} item.color {{ "}}" }}'
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 201
          retries: 100
          delay: 5
          register: r_create_label
          until: r_create_label.status == 201
          loop:
{{- range $item2 := $item1.labels }}
            - name: {{ $item2.name }}
              color: {{ $item2.color }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if $item.users }}
{{- range $item1 := $item.users }}

        - name: Add user to group
          when: item.username == '{{ $item1.id }}'
          ansible.builtin.uri:
            url: https://{{ $.Values.gitlab.host }}/api/v4/groups/{{ "{{" }} r_group.json.id {{ "}}" }}/members
            method: POST
            body_format: form-urlencoded
            body:
              user_id: '{{ "{{" }} item.id {{ "}}" }}'
              access_level: 50
            headers:
              PRIVATE-TOKEN: '{{ "{{" }} root_token {{ "}}" }}'
            validate_certs: false
            status_code: 201
          register: r_group_user
          retries: 100
          delay: 5
          until: r_group_user.status == 201
          loop: '{{ "{{" }} r_users.json {{ "}}" }}'
{{- end }}
{{- end }}
{{- end }}

        - name: Set webhook secret
          ansible.builtin.set_fact:
            webhook_secret: "{{ "{{" }} lookup('password', '/dev/null chars=ascii_lowercase length=12') {{ "}}" }}"

        - name: Retrieve Vault Pod
          kubernetes.core.k8s_info:
            kind: Pod
            name: {{ .Values.vault.name }}-0
            namespace: {{ .Values.vault.namespace }}
          register: r_vault
          retries: 120
          delay: 5
          until:
            - r_vault.resources is defined
            - r_vault.resources | length > 0
            - r_vault.resources[0].status is defined
            - r_vault.resources[0].status.phase is defined
            - r_vault.resources[0].status.phase == 'Running'

        - name: Create vault secrets for Gitlab
          kubernetes.core.k8s_exec:
            namespace: {{ .Values.vault.namespace }}
            pod: {{ .Values.vault.namespace }}-0
            command: '{{ "{{" }} item {{ "}}" }}'
          loop:
            - 'vault kv put kv/secrets/rhdh/gitlab token={{ "{{" }} root_token {{ "}}" }}'
            - 'vault kv put kv/secrets/rhdh/gitlab_webhook secret={{ "{{" }} webhook_secret {{ "}}" }}'
